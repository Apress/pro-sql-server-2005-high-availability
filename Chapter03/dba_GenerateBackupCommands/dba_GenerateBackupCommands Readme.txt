This stored procedure will build your RESTORE commands using the SQL Server system tables and DMVs. There are four basic options

@backuptype = 1, which will return only a full backup
@backuptype = 2, which will return the combination of full + transaction logs
@backuptype = 3, which will return the combination of full + differential backups
@backuptype = 4, which will return the combination of full, differential, and transaction log backups

The other parameter which you need to provide is the name of the database to generate the RESTORE commands. 

Note that this will only restore all files (assuming you need to load a differential or a transaction log) WITH NORECOVERY, not WITH STANDBY. So if you have special needs, like needing to keep replication, you can modify the script to do so. This is just a functional example of what you can do to make your life easier when it comes to a disaster by generating your restore commands ahead of time. 

If you are doing a combination of backup types, the last restore statment generated by this procedure will always bring the database online.

I suggest that you create this stored procedure in a database that is accessible by all of your DBAs, such as DBADB. This database would also be able to contain other objects that your DBAs can use and should exist on every server.

Here is a sample execution:
dba_GenerateBackupCommands 
	@backuptype = 1,
	@dbname = 'TestDB'